fn main() u64 {
    let i = 1 + 2;
    let j = i + 3;
    let k = j;
    k = k + 5 + foo(4);
    let l = j;
    l = l + 5 + foo(4);
    let n = j;
    n = n + 5 + foo(4);
    let m = j;
    m = m + 5 + foo(4);
    let o = j;
    o = o + 5 + foo(4);
    let p = j;
    p = p + 5 + foo(4);
    let q = j;
    q = q + 5 + foo(4);
    let r = j;
    r = r + 5 + foo(4);
    let s = j;
    s = s + 5 + foo(4);
    let t = j;
    t = t + 5 + foo(4);
    let u = j;
    u = u + 5 + foo(4);
    let v = j;
    v = v + 5 + foo(4);
    ret k;
}
fn foo(a: u64) u64 {
    ret a + a + 4;
}
    global main

    section .text
main:
    push rbx
    push r12
    push r13
    push r14
    push r15
    push rbp
    mov rbp, rsp
    mov r15, 0x6
    mov r14, r15
    add r14, 0x5
    mov rdi, 0x4
    call L1
    mov r13, rax
    add r14, r13
    mov r15, r14
    mov r13, 0x6
    mov r12, r13
    add r12, 0x5
    mov rdi, 0x4
    call L1
    mov r11, rax
    add r12, r11
    mov r13, r12
    mov r11, 0x6
    mov r10, r11
    add r10, 0x5
    mov rdi, 0x4
    call L1
    mov r9, rax
    add r10, r9
    mov r11, r10
    mov r9, 0x6
    mov r8, r9
    add r8, 0x5
    mov rdi, 0x4
    call L1
    mov rdi, rax
    add r8, rdi
    mov r9, r8
    mov rdi, 0x6
    mov rsi, rdi
    add rsi, 0x5
    push rdi
    mov rdi, 0x4
    call L1
    pop rdi
    mov rdx, rax
    add rsi, rdx
    mov rdi, rsi
    mov rdx, 0x6
    mov rcx, rdx
    add rcx, 0x5
    push rdi
    mov rdi, 0x4
    call L1
    pop rdi
    mov rbx, rax
    add rcx, rbx
    mov rdx, rcx
    mov rbx, 0x6
    push rbx
    mov rbx, [rbp - 0x8]
    add rbx, 0x5
    push rdi
    mov rdi, 0x4
    call L1
    pop rdi
    push rcx
    mov rcx, rax
    add rbx, rcx
    pop rcx
    mov [rbp - 0x8], rbx
    push rdx
    mov rdx, 0x6
    push rsi
    mov rsi, rdx
    add rsi, 0x5
    push rdi
    mov rdi, 0x4
    call L1
    pop rdi
    push rdi
    mov rdi, rax
    add rsi, rdi
    pop rdi
    mov rdx, rsi
    push r8
    mov r8, 0x6
    push r9
    mov r9, r8
    add r9, 0x5
    push rdi
    mov rdi, 0x4
    call L1
    pop rdi
    push r10
    mov r10, rax
    add r9, r10
    pop r10
    mov r8, r9
    push r11
    mov r11, 0x6
    push r12
    mov r12, r11
    add r12, 0x5
    push rdi
    mov rdi, 0x4
    call L1
    pop rdi
    push r13
    mov r13, rax
    add r12, r13
    pop r13
    mov r11, r12
    push r14
    mov r14, 0x6
    push r15
    mov r15, r14
    add r15, 0x5
    push rdi
    mov rdi, 0x4
    call L1
    pop rdi
    push rbx
    mov rbx, rax
    add r15, rbx
    pop rbx
    mov r14, r15
    push rcx
    mov rcx, 0x6
    push rdx
    mov rdx, rcx
    add rdx, 0x5
    push rdi
    mov rdi, 0x4
    call L1
    pop rdi
    push rsi
    mov rsi, rax
    add rdx, rsi
    pop rsi
    mov rcx, rdx
    mov rax, [rbp - 0x48]
    sub rsp, 0x58
    jmp L2
    pop rdx
    pop rcx
    pop r15
    pop r14
    pop r12
    pop r11
    pop r9
    pop r8
    pop rsi
    pop rdx
    pop rbx
L2:
    mov rsp, rbp
    pop rbp
    pop r15
    pop r14
    pop r13
    pop r12
    pop rbx
    ret
L1:
    push r15
    push rbp
    mov rbp, rsp
    mov r15, rdi
    add r15, rdi
    add r15, 0x4
    mov rax, r15
    jmp L3
L3:
    mov rsp, rbp
    pop rbp
    pop r15
    ret
exit code: child_process.ChildProcess.Term{ .Exited = 23 }
