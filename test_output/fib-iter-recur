fn main() u64 {
    ret fib(10, 0, 1);
}
fn fib(n: u64, a: u64, b: u64) u64 {
    if (n == 0) ret a;
    ret fib(n - 1, b, a + b);
}
    global main

    section .text
main:
    push r15
    push rbp
    mov rbp, rsp
    mov rdi, 0xa
    mov rsi, 0x0
    mov rdx, 0x1
    call L1
    mov r15, rax
    mov rax, r15
    jmp L2
L2:
    mov rsp, rbp
    pop rbp
    pop r15
    ret
L1:
    push r13
    push r14
    push r15
    push rbp
    mov rbp, rsp
    cmp dil, 0x0
    sete r15b
    movzx r15, r15b
    cmp r15b, 0x0
    je L3
    mov rax, rsi
    jmp L4
    L3:
    mov r14, 0x0
    dec r14
    mov rdi, r14
    push rsi
    mov rsi, rdx
    mov r13, [rbp - 0x0]
    add r13, rdx
    mov rdx, r13
    call L1
    pop rsi
    mov r14, rax
    mov rax, r14
    jmp L4
L4:
    mov rsp, rbp
    pop rbp
    pop r15
    pop r14
    pop r13
    ret
exit code: child_process.ChildProcess.Term{ .Signal = 11 }
