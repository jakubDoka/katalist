fn main() u64 {
    let i = 1 + 2;
    let j = i + 3;
    let k = j;
    k = k + 5 + foo(4);
    let l = j;
    l = l + 5 + foo(4);
    let n = j;
    n = n + 5 + foo(4);
    let m = j;
    m = m + 5 + foo(4);
    let o = j;
    o = o + 5 + foo(4);
    let p = j;
    p = p + 5 + foo(4);
    let q = j;
    q = q + 5 + foo(4);
    let r = j;
    r = r + 5 + foo(4);
    let s = j;
    s = s + 5 + foo(4);
    let t = j;
    t = t + 5 + foo(4);
    let u = j;
    u = u + 5 + foo(4);
    let v = j;
    v = v + 5 + foo(4);
    ret k;
}
fn foo(a: u64) u64 {
    ret a + a + 4;
}
    global main

    section .text
main:
    push r12
    push r13
    push r14
    push r15
    push rbp
    mov rbp, rsp
    mov r15, 0x6
    mov r14, r15
    add r14, 0x5
    mov rdi, 0x4
    call L1
    mov r13, rax
    add r14, r13
    mov r15, r14
    mov r14, 0x6
    mov r13, r14
    add r13, 0x5
    mov rdi, 0x4
    call L1
    mov r12, rax
    add r13, r12
    mov r14, r13
    mov r14, 0x6
    mov r13, r14
    add r13, 0x5
    mov rdi, 0x4
    call L1
    mov r12, rax
    add r13, r12
    mov r14, r13
    mov r14, 0x6
    mov r13, r14
    add r13, 0x5
    mov rdi, 0x4
    call L1
    mov r12, rax
    add r13, r12
    mov r14, r13
    mov r14, 0x6
    mov r13, r14
    add r13, 0x5
    mov rdi, 0x4
    call L1
    mov r12, rax
    add r13, r12
    mov r14, r13
    mov r14, 0x6
    mov r13, r14
    add r13, 0x5
    mov rdi, 0x4
    call L1
    mov r12, rax
    add r13, r12
    mov r14, r13
    mov r14, 0x6
    mov r13, r14
    add r13, 0x5
    mov rdi, 0x4
    call L1
    mov r12, rax
    add r13, r12
    mov r14, r13
    mov r14, 0x6
    mov r13, r14
    add r13, 0x5
    mov rdi, 0x4
    call L1
    mov r12, rax
    add r13, r12
    mov r14, r13
    mov r14, 0x6
    mov r13, r14
    add r13, 0x5
    mov rdi, 0x4
    call L1
    mov r12, rax
    add r13, r12
    mov r14, r13
    mov r14, 0x6
    mov r13, r14
    add r13, 0x5
    mov rdi, 0x4
    call L1
    mov r12, rax
    add r13, r12
    mov r14, r13
    mov r14, 0x6
    mov r13, r14
    add r13, 0x5
    mov rdi, 0x4
    call L1
    mov r12, rax
    add r13, r12
    mov r14, r13
    mov r14, 0x6
    mov r13, r14
    add r13, 0x5
    mov rdi, 0x4
    call L1
    mov r12, rax
    add r13, r12
    mov r14, r13
    mov rax, r15
    jmp L2
L2:
    mov rsp, rbp
    pop rbp
    pop r15
    pop r14
    pop r13
    pop r12
    ret
L1:
    push r15
    push rbp
    mov rbp, rsp
    mov r15, rdi
    add r15, rdi
    add r15, 0x4
    mov rax, r15
    jmp L3
L3:
    mov rsp, rbp
    pop rbp
    pop r15
    ret
exit code: child_process.ChildProcess.Term{ .Exited = 23 }
